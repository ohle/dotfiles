#!/bin/bash

GREEN="#859900"
YELLOW="#b58900"
RED="#dc322f"

PIPE="$(dirname "$0")/lemonbar.pipe"
PID="$$"

if [ "$(pgrep -cx lemonbar)" -gt 0 ]
then
    echo "Panel already running" >2
    exit 1
fi

[ -e "$PIPE" ] && rm "$PIPE"
mkfifo "$PIPE"

function clock() {
    datetime=$(date "+%a %b %d, %H:%M")
    hour=$(date "+%H")
    minute=$(date "+%M")

    color="-"
    if [[ $(hostname) = "ohle" ]]
    then
        if [[ $hour = 16 ]] && [[ $minute -gt 45 ]]
        then
            color="$GREEN"
        elif [[ $hour -ge 17 ]] && [[ $minute -lt 15 ]]
        then
            color="$YELLOW"
        elif [[ $hour -ge 17 ]]
        then
            color="$RED"
        fi
    fi
    echo "CLK %{F${color}} $datetime %{F-}"
}


function email() {
    if command -v notmuch >/dev/null
    then
        inbox=$(notmuch count is:inbox)
        unread_count=$(notmuch count is:unread)
        if [[ $unread_count -gt 0 ]]
        then
            unread="%{F${YELLOW}} (${unread_count}) %{F-}"
        else
            unread=""
        fi
        echo "EML \uf0e0 ${inbox}${unread}"
    fi
}

function focus_email() {
    bspc desktop "^2:^6" -f
    bspc node biggest.tiled.local -f
}

function focus_gpm() {
    xdotool search --class "Google Play Music Desktop Player" windowactivate
}

function perc_color() {
    percentage="${1%%.*}"
    if [[ $percentage -gt 50 ]]
    then
        echo $GREEN
    elif [[ $percentage -gt 70 ]]
    then
        echo $YELLOW
    elif [[ $percentage -gt 85 ]]
    then
        echo $RED
    else
        echo "-"
    fi
}

function memory() {
    freever=$(free --version | awk '{ print $4 }' | awk -F. '{ print $3 }')

    total=$(free | awk '/Mem/ { printf($2) }')
    used=$(free | awk '/Mem/ { printf($3) }')
    buffers=$(free | awk '/Mem/ { printf($6) }')
    cached=$(free | awk '/Mem/ { printf($7) }')
    if [[ $freever -ge 12 ]]
    then
        percentage=$(( used * 100 / total ))
    else
        percentage=$(( (used - buffers - cached) * 100 / total ))
    fi
    color=$(perc_color $percentage)
    echo "MEM %{F${color}} ${percentage}% %{F-}"
}

function cpu() {
    percentage=$(top -bn2 | awk '/%Cpu\(s\)/ { print 100 - $8 }')

    echo "CPU %{F$(perc_color "${percentage}")} ${percentage}% %{F-}"
}

function windowtitle() {
    xdotool getactivewindow getwindowname
}

function windowstate() {
    state=$(bspc query -T --node | jq -r '.client.state')
    if [[ $state == 'floating' ]]
    then
        echo " %{F${YELLOW}}\uf1d8%{F-}"
    fi
}

BAT_PATTERN="Battery 0: ([A-Za-z]+), ([0-9]+)%, ([0-9][0-9]:[0-9][0-9]):[0-9][0-9] (remaining|until charged)"
BAT_FULL="Battery 0: Full, 100%"
function battery() {
    if command -v acpi >/dev/null
    then
        batline=$(acpi --battery) 
        if [[ $batline =~ $BAT_PATTERN ]]
        then
            state="${BASH_REMATCH[1]}"
            percent="${BASH_REMATCH[2]}"
            remaining="${BASH_REMATCH[3]}"
            if [[ $percent -lt 25 ]]
            then
                symbol="\uf243"
                color=$RED
            elif [[ $percent -lt 50 ]]
            then
                symbol="\uf242"
                color=$YELLOW
            elif [[ $percent -lt 75 ]]
            then
                symbol="\uf241"
                color=$GREEN
            else
                symbol="\uf240"
                color="-"
            fi
            if [[ ${state} == "Charging" ]]
            then
                statesym="\uf5e7"
            fi
            echo -e "BAT %{F${color}}${symbol} ${statesym} ${remaining}${F-}"
        elif [[ $batline == ${BAT_FULL} ]]
        then
            echo -e "BAT \uf5e7"
        else
            echo "BAT PARSE ERROR"
        fi
    fi
}

GPMSTATUS="${HOME}/.config/Google Play Music Desktop Player/json_store/playback.json"
if [ ! -f "${GPMSTATUS}" ]
then
    GPMSTATUS="${HOME}/snap/google-play-music-desktop-player/current/.config/Google Play Music Desktop Player/json_store/playback.json"
fi
function music() {
    status="$(cat "${GPMSTATUS}")"
    title="$(echo ${status} | jq -r '.song.title')"
    artist="$(echo ${status} | jq -r '.song.artist')"
    playing="$(echo ${status} | jq -r '.playing')"
    played="$(echo ${status} | jq -r '.time.current')"
    total="$(echo ${status} | jq -r '.time.total')"
    minutes=$(( played / 60000 ))
    seconds=$(( played / 1000 - (minutes * 60) ))
    minutes_total=$(( total / 60000 ))
    seconds_total=$(( total / 1000 - (minutes_total * 60) ))
    if [[ $playing == "true" ]]
    then
        icon="\uf04b"
    else
        icon="\uf04c"
    fi
    echo -e "MUS %{A:play_pause:} ${icon} %{A} ${artist} - ${title} ${minutes}:${seconds}/${minutes_total}:${seconds_total}"
}

function monitor_window_title_int() {
    winid="$1"
    pkill xprop
    xprop -spy -id "$winid" _NET_WM_NAME | while read line
    do
        title=$(echo "$line" | cut -d'=' -f2 | cut -c3- | rev | cut -c2- | rev)
        echo "WTL $title"
    done
}

function monitor_window_title() {
    spypid=0
    bspc subscribe node_focus |  while read 
    do
        winid=$(xdotool getactivewindow)
        if [[ $spypid -gt 0 ]]
        then
            kill "$spypid"
        fi
        monitor_window_title_int "$winid" &
        spypid=$!
    done
}

OPEN_WEATHER_MAP_API_KEY=$(cat $HOME/.openweathermap-api-key)
OPEN_WEATHER_MAP_URL="http://api.openweathermap.org/data/2.5/weather?APPID=${OPEN_WEATHER_MAP_API_KEY}&q=berlin,de"
function weather() {
    kelvin=$(curl "$OPEN_WEATHER_MAP_URL" | jq -r '.main.temp')
    celsius=$(( ${kelvin%.*} - 273 ))
    echo "WTR ${celsius}Â°C"
}

while :; do clock; sleep 10s; done > "$PIPE" &
while :; do email; sleep 10s; done > "$PIPE" &
while :; do memory; sleep 10s; done > "$PIPE" &
while :; do cpu; sleep 10s; done > "$PIPE" &
while :; do battery; sleep 10s; done > "$PIPE" &
while :; do weather; sleep 5m; done >"$PIPE" &
while inotifywait -e modify "$GPMSTATUS"; do music; done > "$PIPE" &
bspc subscribe node_state node_focus  > "$PIPE" &
bspc subscribe desktop_focus >"$PIPE" &
monitor_window_title > "$PIPE" &

while read -r event
do
    case "$event" in
        CLK*)
            clock="${event:4}"
            ;;
        EML*)
            email="${event:4}"
            ;;
        MEM*)
            memory="${event:4}"
            ;;
        CPU*)
            cpu="${event:4}"
            ;;
        BAT*)
            battery="${event:4}"
            ;;
        WTL*)
            title="${event:4}"
            ;;
        WTR*)
            temp="${event:4}"
            ;;
        MUS*)
            music="${event:4}"
            ;;
        node_focus*)
            state=$(windowstate)
            ;;
        desktop_focus*)
            desktop=$(bspc query -D -d focused --names)
            ;;
        node_state*)
            state=$(windowstate)
            ;;
        *)
            unknown="%{F#ff0000}${event}%{F-}"
    esac
    echo -e "${clock} %{O120} ${temp} %{A:focus_email:} ${email} %{A} %{O} %{c} ${desktop}: ${title}${state} %{r} %{A4:vol_up:} %{A5:vol_down:} %{A:focus_gpm:} ${music} %{A} %{A} %{A} %{A:conky:} CPU ${cpu} MEM ${memory} %{A} ${battery}"
done < "$PIPE" | lemonbar -g x24 -p -f terminus-12 -f "FontAwesome" -f "nimbus-mono" -B "#002b36" -F "#839496" | while read line
do
    case "$line" in
        focus_email)
            focus_email
            ;;
        focus_gpm)
            focus_gpm
            ;;
        vol_up)
            amixer set 'Master' 5%+
            ;;
        vol_down)
            amixer set 'Master' 5%-
            ;;
        play_pause)
            xdotool key XF86AudioPlay
            ;;
        conky)
            conky
            ;;
    esac
done

