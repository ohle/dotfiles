#!/bin/bash

GREEN="#859900"
YELLOW="#b58900"
ORANGE="#cb4b16"
RED="#dc322f"
DARKFG="#657b83"


PIPE="$(dirname "$0")/lemonbar.pipe"
PID="$$"

if [ "$(pgrep -cx lemonbar)" -gt 0 ]
then
    echo "Panel already running" >2
    exit 1
fi

[ -e "$PIPE" ] && rm "$PIPE"
mkfifo "$PIPE"

function calendar() {
    date=$(date "+%a %b %d")
    free_icon="\uf133"
    busy_icon="\uf274"
    events=$(khal list --format "{start-time}" now tomorrow | tail -n +2 | grep '[0-9]')

    if [[ -n $events ]]
    then
        icon=$busy_icon
        eventcount=$(echo "$events" | wc -l)

        next_start=$(khal list --format "{start-time}" now tomorrow | grep '[0-9]' | tail -n +2 | head -1 | cut -d'-' -f1)
        next_start_seconds=$(date -d "$next_start" +%s)
        now=$(date +%s)
        minutes_left=$(( (next_start_seconds - now) / 60 ))

        if [[ $minutes_left -lt 5 ]]
        then
            background=$RED
            color=$DARKFG
        elif [[ $minutes_left -lt 15 ]]
        then
            background=$ORANGE
            color=$DARKFG
        elif [[ $minutes_left -lt 30 ]]
        then
            background=$GREEN
            color=$DARKFG
        else
            background="-"
            color="-"
        fi
    else
        icon=$free_icon
        eventcount=""
        background="-"
    fi
    echo "CAL %{B${background}}%{F${color}}${icon} ${eventcount}%{F-} %{B-} ${date}"
}

function clock() {
    # datetime=$(date "+%a %b %d, %H:%M")
    datetime=$(date "+%H:%M")
    hour=$(date "+%k")
    minute=$(date "+%M")

    color="-"
    if [[ $(hostname) = "ohle-bioafm" ]]
    then
        pickup_days=$(khal list --format "{title}" $(date -dmonday +%Y-%m-%d) sunday | grep "abholen" | wc -l )
        time_to_leave=$(date -d "16:30" +%s)
        if khal list now tomorrow | grep -q "abholen"
        then
            time_to_leave=$(date -d "15:45" +%s)
        else
            time_to_leave=$(( time_to_leave + 30 * 60 * pickup_days ))
        fi
        minutes_left=$(( (time_to_leave - $(date +%s)) / 60 ))
        if [[ $minutes_left -lt 30 ]]
        then
            color="$GREEN"
        elif [[ $minutes_left -lt 15 ]]
        then
            color="$YELLOW"
        elif [[ $minutes_left -lt 0 ]]
        then
            color="$RED"
        fi
    fi
    echo "CLK %{F${color}}\uf017 $datetime %{F-}"
}


function email() {
    if command -v notmuch >/dev/null
    then
        inbox=$(notmuch count is:inbox)
        unread_count=$(notmuch count is:unread)
        if [[ $unread_count -gt 0 ]]
        then
            unread="%{F${YELLOW}} (${unread_count}) %{F-}"
        else
            unread=""
        fi
        echo "EML \uf0e0 ${inbox}${unread}"
    fi
}

function focus_email() {
    bspc desktop "^2:^6" -f
    bspc node biggest.tiled.local -f
}

function perc_color() {
    percentage="${1%%.*}"
    if [[ $percentage -gt 50 ]]
    then
        echo $GREEN
    elif [[ $percentage -gt 70 ]]
    then
        echo $YELLOW
    elif [[ $percentage -gt 85 ]]
    then
        echo $RED
    else
        echo "-"
    fi
}

function windowtitle() {
    xdotool getactivewindow getwindowname
}

function windowstate() {
    state=$(bspc query -T --node | jq -r '.client.state')
    if [[ $state == 'floating' ]]
    then
        echo " %{F${YELLOW}}\uf1d8%{F-}"
    fi
}

function music() {
    if [[ $(mpc current) ]]
    then
        if mpc status | grep -q paused
        then
            ompd="\uf04c $(mpc current)"
        else
            ompd="\uf001 $(mpc current)"
        fi
    fi

    title="$(mpc current)"
    status="$(mpc status | tail -2 | head -1)"
    played="$(echo ${status} | awk '{ print $3 }')"

    if echo "$status" | grep -q 'playing'
    then
        icon="\uf04b"
    else
        icon="\uf04c"
    fi
    echo -e "MUS %{A:play_pause:} ${icon} %{A}" 
    echo "foo"
}

function monitor_window_title_int() {
    winid="$1"
    pkill xprop
    xprop -spy -id "$winid" _NET_WM_NAME | while read line
    do
        title=$(echo "$line" | cut -d'=' -f2 | cut -c3- | rev | cut -c2- | rev)
        echo "WTL $title"
    done
}

function monitor_window_title() {
    spypid=0
    bspc subscribe node_focus |  while read 
    do
        winid=$(xdotool getactivewindow)
        if [[ $spypid -gt 0 ]]
        then
            kill "$spypid"
        fi
        monitor_window_title_int "$winid" &
        spypid=$!
    done
}

function weather() {
    weather=$(curl wttr.in?format=%c+%t+%w)
    echo "WTR ${weather}"
}

while :; do clock; sleep 10s; done > "$PIPE" &
while :; do calendar; sleep 10s; done > "$PIPE" &
while :; do email; sleep 10s; done > "$PIPE" &
#while :; do weather; sleep 5m; done >"$PIPE" &
while :; do music; sleep 10s; done > "$PIPE" &
#bspc subscribe node_state node_focus  > "$PIPE" &
#bspc subscribe desktop_focus >"$PIPE" &
monitor_window_title > "$PIPE" &

while read -r event
do
    case "$event" in
        CLK*)
            clock="${event:4}"
            ;;
        CAL*)
            calendar="${event:4}"
            ;;
        EML*)
            email="${event:4}"
            ;;
        WTL*)
            title="${event:4}"
            ;;
        WTR*)
            temp="${event:4}"
            ;;
        MUS*)
            music="${event:4}"
            ;;
        node_focus*)
            state=$(windowstate)
            ;;
        desktop_focus*)
            desktop=$(bspc query -D -d focused --names)
            ;;
        node_state*)
            state=$(windowstate)
            ;;
        *)
            unknown="%{F#ff0000}${event}%{F-}"
    esac
	    echo -e "${clock} %{A:agenda:} ${calendar} %{A} ${temp} %{A:focus_email:} ${email} %{A} %{A4:vol_up:} %{A5:vol_down:} ${music} %{A} %{A} %{O} %{c} ${desktop}: ${title}${state}"
done < "$PIPE" | lemonbar -g x24 -p -f terminus-12 -f "FontAwesome" -f "Emoji One" -B "#002b36" -F "#839496" | while read line
do
    case "$line" in
        agenda)
            notify-send "$(khal list now tomorrow)"
            ;;
        focus_email)
            focus_email
            ;;
        vol_up)
            amixer set 'Master' 5%+
            ;;
        vol_down)
            amixer set 'Master' 5%-
            ;;
        play_pause)
            mpc toggle
            ;;
        conky)
            conky
            ;;
    esac
done

